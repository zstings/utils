declare const utils = {
/**
 * 按长度拆分数组
 * @param array 数组
 * @param size 长度 默认1
 * @return 新的数组
 * @throws array参数需要Array array参数错误时触发
 * @throws 请检查size参数，必须符合大于0的整数 size参数错误时触发
 * @category 数组Array
 * @example
* eg:
 * ```ts
 * chunk([{a:1}, {a: 2}, {a: 3}, {a: 4}], 2)
 * // => [[{a:1},{a:2}],[{a:3},{a:4}]]
 * ```
 * @example
* eg:
 * ```ts
 * chunk([{a:1}, {a: 2}, {a: 3}, {a: 4}], 3)
 * // => [[{a:1},{a:2},{a:3}],[{a:4}]]
 * ```
 */
chunk(array: any[], size?: number): any[];

/**
 * 移除所有 falsey 值的数组
 * @param array 数组
 * @return 新的数组
 * @throws array参数需要Array array参数错误时触发
 * @category 数组Array
 * @example
* eg:
 * falsey => 0 | false | null | undefined | NaN
 * ```ts
 * compact([1, 0, false, 2, NaN, 3, null]) => [1, 2, 3]
 * ```
 */
compact(array: any[]): any[];

/**
 * 二维数组转化为对象
 * @param array 数组
 * @return 新的数组
 * @throws array参数需要Array array参数错误时触发
 * @throws size参数需要Number size参数错误时触发
 * @category 数组Array
 * @example
* eg:
 * ```ts
 * fromPairs([['a', 1], ['b', 2]]) => {a: 1, b: 2}
 * ```
 * @example
* eg:
 * 多余的成员会被舍弃
 * ```ts
 * fromPairs([['a', 1], ['b', 2, 3]) => {a: 1, b: 2}
 * ```
 */
fromPairs(array: any[]): Record<string, unknown>;

/**
 * 数组去重
 * @param array 数组
 * @param option
 * @param option.key 数组对象去重时指定的键
 * @param option.deep 是否启用引用类型的去重 默认true， 如果指定了key, deep 强制为 true
 * @return 新的数组
 * @throws array参数需要Array array参数错误时触发
 * @throws key参数需要String key存在且不是字符串时触发
 * @throws key指定的属性不存在 key在数组对象的对象中找不到次属性时触发
 * @category 数组Array
 * @example
* eg:
 * ```ts
 * unique([1, 2, 1]) => [1, 2]
 * ```
 * @example
* eg:
 * 数组对象去重-指定key
 * ```ts
 * unique([{id: 1, name: '1'}, {id: 2, name: '2'}, {id: 1, name: '1'}], {key: 'id'})
 * // => [{id: 1, name: '1'}, {id: 2, name: '2'}]
 * ```
 * 不指定key，默认启用引用类型的去重
 * ```ts
 * unique([{id: 1, name: '1'}, {id: 1, name: '2'}, {id: 1, name: '1'}])
 * // => [{id: 1, name: '1'}, {id: 1, name: '2'}]
 * ```
 * 不指定key，关闭引用类型的去重
 * ```ts
 * unique([1, 2, 1, {id: 1, name: '1'}, {id: 1, name: '2'}, {id: 1, name: '1'}], {deep: false})
 * // => [1, 2, {id: 1, name: '1'}, {id: 1, name: '2'}, {id: 1, name: '1'}]
 * ```
 */
unique(array: any[], option?: {
    key?: string;
    deep?: boolean;
}): any[];

/**
 * 将3(4)位16进制色值转为6(8)位
 * @param hex 字符串
 * @return 6位hex
 * @throws 无法识别正确的hex hex参数不是正确的hex时触发
 * @category 颜色Color
 * @example
* eg:
 * ```ts
 * extendHex('#03f') // => '#0033ff'
 * ```
 * @example
* eg:
 * ```ts
 * extendHex('#03ff') // => '#0033ffff'
 * ```
 */
extendHex(hex: string): string;

/**
 * 将16进制hex色值转为rgb(a)色值
 * @param hex 字符串
 * @return 字符串
 * @throws 无法识别正确的hex hex参数不是正确的hex时触发
 * @category 颜色Color
 * @example
* eg:
 * ```ts
 * hexToRgb('#aabbcc') // => '170,187,204'
 * ```
 * @example
* eg:
 * 支持透明度
 * ```ts
 * hexToRgb('#aabbcc8d') // => '170,187,204,0.55'
 * ```
 */
hexToRgb(hex?: string): string;

/**
 * 判断是否是16进制hex色值
 * @param hex 字符串
 * @return true | false
 * @category 颜色Color
 * @example
* eg:
 * ```ts
 * isHex('#aabbcc') // => true
 * ```
 * @example
* eg:
 * 支持3位
 * ```ts
 * isHex('#abc') // => true
 * ```
 * @example
* eg:
 * 支持透明度
 * ```ts
 * isHex('#aabbcc8d') // => true
 * ```
 * @example
* eg:
 * 支持透明度
 * ```ts
 * isHex('#df') // => false
 * ```
 * @example
* eg:
 * 支持透明度
 * ```ts
 * isHex('#adg') // => false
 * ```
 */
isHex(hex?: string): boolean;

/**
 * 判断是否是16进制hex色值
 * @param rgba 字符串
 * @return true | false
 * @category 颜色Color
 * @example
* eg:
 * ```ts
 * isRgba('170,187,255') // => true
 * ```
 * @example
* eg:
 * 支持透明度
 * ```ts
 * isRgba('170,187,255,0.91') // => true
 * ```
 * @example
* eg:
 * 支持透明度
 * ```ts
 * isRgba('170,187,266,0.91') // => false
 * ```
 * @example
* eg:
 * 支持透明度
 * ```ts
 * isRgba('170,187,256,2') // => false
 * ```
 */
isRgba(rgba?: string): boolean;

/**
 * 随机生成16进制色值
 * @return 字符串
 * @category 颜色Color
 * @example
* eg:
 * ```ts
 * randomHex() // => '#cf65dd'
 * ```
 */
randomHex(): string;

/**
 * 随机生成RGBA色值
 * @return 字符串
 * @category 颜色Color
 * @example
* eg:
 * ```ts
 * randomRgba() // => '#cf65dd'
 * ```
 */
randomRgba(): string;

/**
 * 将rgb(a)色值转为16进制hex色值
 * @param rgba 字符串
 * @return 字符串
 * @throws 无法识别正确的rgba rgba参数不是正确的hex时触发
 * @category 颜色Color
 * @example
* eg:
 * ```ts
 * rgbToHex('170,187,255') // => '#aabbff'
 * ```
 * @example
* eg:
 * // 支持透明度
 * ```ts
 * rgbToHex('170,187,255,0.91') // => '#aabbffe8'
 * ```
 */
rgbToHex(rgba: string): string;

/**
 * 将6(8)位16进制色值转为3(4)位
 * @param hex 字符串
 * @return 3位hex
 * @throws 无法识别正确的hex hex参数不是正确的hex时触发
 * @category 颜色Color
 * @example
* eg:
 * ```ts
 * shrinkHex('#0033ff') // => '#03f'
 * ```
 * @example
* eg:
 * // 无法转化的原样输出
 * ```ts
 * shrinkHex('#0037ff') // => '#0037ff'
 * ```
 */
shrinkHex(hex?: string): string;

/**
 * 获取数据类型
 * @param value 任意值
 * @return 返回value的类型
 * @category 工具Util
 * @example
* eg:
 * 数字
 * ```ts
 * typeOf(12) => 'Number'
 * ```
 * @example
* eg:
 * 字符串
 * ```ts
 * typeOf('12') => 'String'
 * ```
 * @example
* eg:
 * 布尔
 * ```ts
 * typeOf(true) => 'Boolean'
 * ```
 * @example
* eg:
 * 函数
 * ```ts
 * typeOf(functuin(){}) => 'Function'
 * ```
 * @example
* eg:
 * 对象
 * ```ts
 * typeOf({}) => 'Object'
 * ```
 * @example
* eg:
 * 数组
 * ```ts
 * typeOf([]) => 'Array'
 * ```
 */
typeOf(value: any): string;

/**
 * 获取版本号
 * @return 版本号
 * @category 工具Util
 */
version(): string;

/**
 * 获取时间对象
 * @param time 时间戳|格式化后的时间字符|时间对象|可转化的时间数组
 * @return 时间对象
 * @throws Invalid Date 传入值无法转为Date时触发
 * @category 时间Date
 * @example
* eg:
 * 获取当前的时间对象
 * ```ts
 * days()
 * // => Mon Aug 29 2022 17:56:41 GMT+0800 (中国标准时间)
 * ```
 * @example
* eg:
 * 支持时间戳
 * ```ts
 * days(1318781876406)
 * // => Mon Oct 17 2011 00:17:56 GMT+0800 (中国标准时间)
 * ```
 * @example
* eg:
 * 支持格式化的时间字符
 * ```ts
 * days('2018-04-04T16:00:00.000Z')
 * // => Thu Apr 05 2018 00:00:00 GMT+0800 (中国标准时间)
 * days('2022-12-12')
 * // => Mon Dec 12 2022 08:00:00 GMT+0800 (中国标准时间)
 * days('2022-12-12 23:45')
 * // => Mon Dec 12 2022 23:45:00 GMT+0800 (中国标准时间)
 * ```
 * @example
* eg:
 * 支持Date对象
 * ```ts
 * days(Date.now())
 * // => days:1 Mon Aug 29 2022 18:02:32 GMT+0800 (中国标准时间)
 * ```
 * @example
* eg:
 * 可转化的时间数组, 成员依次为年、月、日、时、分、秒, 可以是数组或者字符串
 * ```ts
 * days([2018, 10, 7, 20, 15, 19])
 * // => Fri Sep 30 2022 10:10:10 GMT+0800 (中国标准时间)
 * days([2018, 10, 7, 20, '15', '19'])
 * // 可以是字符串
 * // => Fri Sep 30 2022 10:10:10 GMT+0800 (中国标准时间)
 * days([2018, 10, 7])
 * // 可以减少成员
 * // => Fri Sep 30 2022 00:00:00 GMT+0800 (中国标准时间)
 * ```
 * @example
* eg:
 * 对于非0的falsey值，等同于 new Date()
 * ```ts
 * days(null) == days()
 * days(undefined) == days()
 * days(false) == days()
 * days('') == days()
 * ```
 * @example
* eg:
 * 传入参数无法转换为时间对象会报错
 * ```ts
 * days('aaa') // throw 'Invalid Date'
 * ```
 */
days(time?: number | string | Date | (string | number)[]): Date;

/**
 * 获取指定格式的时间
 * @param value 时间对象或者时间戳
 * @param format 返回格式 默认 YYYY-MM-DD hh:mm:ss
 * @return 指定格式的时间
 * @category 时间Date
 * @example
* eg:
 * 获取当前的日期
 * ```ts
 * formats() // '2022-07-30 12:41:26'
 * ```
 * @example
* eg:
 * 获取当前时间的年月
 * ```ts
 * formats(Date.now(), 'YYYY-MM') // '2022-07'
 * formats(Date.now(), 'YYYY年MM月') // '2022年07月'
 * ```
 * @example
* eg:
 * 获取具体日期的时间格式
 * ```ts
 * const date = new Date('2022/10/10 10:00:00')
 * formats(date, 'YYYY-MM-DD') // '2022-10-10'
 * ```
 */
formats(time?: number | string | Date | (string | number)[], format?: string): string;

/**
 * 获取时间区间
 * @param day 间隔天数，默认1，表示今天
 * @param option 选项
 * @param option.start 起始时间， 默认今天
 * @param option.format 时间格式， 默认YYYY-MM-DD
 * @param option.timeStamp 是否时间戳，默认false， 为true时，忽略 format
 * @return 数组 [起始时间, 结束时间]
 * @throws day 必须是数字
 * @throws option 必须是对象
 * @throws option.start 必须可以被转化为Date
 * @throws option.format 必须是字符串
 * @throws option.timeStamp 必须是布尔值
 * @category 时间Date
 * @example
* eg:
 * ```ts
 * getDataSection() // => ['2022-08-23', '2022-08-23']
 * ```
 * @example
* eg:
 * 近7天时间区间
 * ```ts
 * getDataSection(7) // => ['2022-08-17', '2022-08-23']
 * ```
 * @example
* eg:
 * 近30天时间区间
 * ```ts
 * getDataSection(30) // => ['2022-07-28', '2022-08-26']
 * ```
 * @example
* eg:
 * 指定起始时间
 * ```ts
 * getDataSection(7, {start: '2022-08-17'}) // => ['2022-08-11', '2022-08-17']
 * ```
 */
getDataSection(day?: number, option?: {
    start?: number | string | Date | (string | number)[];
    format?: string;
    timestamp?: boolean;
}): (number | string)[];

/**
 * 获取指定月的天数
 * @param year 年份, 默认当前年
 * @param month 月份, 默认当前月
 * @return 天数
 * @throws Invalid Date 传入值无法转为Date时触发
 * @category 时间Date
 * @example
* eg:
 * 获取当前月份的天数
 * ```ts
 * getMonthDays() // => 31
 * ```
 * @example
* eg:
 * 获取指定月份的天数
 * ```ts
 * getMonthDays(2022, 1) // => 31
 * ```
 */
getMonthDays(year?: number, month?: number): number;

/**
 * 获取距离指定时间之前
 * @param endTime 目标时间戳或者格式化的时间字符
 * @param startTime 开始时间戳或者格式化的时间字符, 默认当前时间戳，非必填
 * @return 年|月|天|小时|分钟|秒 之前
 * @throws 无法转换为时间 传入值无法转为Date时触发
 * @throws 只接受 number | string 传入值不是 number | string时触发
 * @category 时间Date
 * @example
* eg:
 * ```ts
 * howLongAgo(1660644035390) // => '4分钟前'
 * ```
 * @example
* eg:
 * ```ts
 * howLongAgo(1660644418571) // => '5秒前'
 * ```
 * @example
* eg:
 * 支持格式化的时间字符
 * ```ts
 * howLongAgo('2022-08-17 09: 12: 00') // => '10分钟前'
 * ```
 * @example
* eg:
 * 指定起始时间
 * ```ts
 * howLongAgo('2022-08-17 09: 12: 00', '2022-08-17 09: 15: 00')
 * // => '3分钟前'
 * ```
 */
howLongAgo(endTime?: number | string | Date | (string | number)[], startTime?: number | string | Date | (string | number)[]): string;

/**
 * 获取时间戳
 * @param time 时间戳|格式化后的时间字符|时间对象
 * @param unit 返回格式,支持毫秒或者秒,默认毫秒
 * @return 时间戳
 * @throws Invalid Date 参数time无法转为Date时触发
 * @category 时间Date
 * @example
* eg:
 * 获取当前的时间戳
 * ```ts
 * timeStamp() // 1659334598129
 * ```
 * @example
* eg:
 * 获取当前的时间戳，单位秒(s)
 * ```ts
 * timeStamp('', 's') // 1660700890
 * ```
 * @example
* eg:
 * 获取 2022-10-12 的时间戳
 * ```ts
 * timeStamp('2022-10-12') // 1665504000000
 * ```
 * @example
* eg:
 * 获取 2022-10-12 的时间戳, 以秒返回
 * ```ts
 * timeStamp('2022-10-12', 's') // 1665504000
 * ```
 */
timeStamp(time?: number | string | Date | (string | number)[], unit?: string): number;

/**
 * 获取设备类型
 * @return 'Mobile' | 'Desktop'
 * @category 设备Device
 * @example
* eg:
 * 移动端访问
 * ```ts
 * detectDeviceType() // => 'Mobile'
 * ```
 * @example
* eg:
 * 桌面端访问
 * ```ts
 * detectDeviceType() // => 'Desktop'
 * ```
 */
detectDeviceType(): "Mobile" | "Desktop";

/**
 * 是否是安卓系统
 * @return true | false
 * @category 设备Device
 * @example
* eg:
 * 安卓手机访问
 * ```ts
 * isAndroid() // => true
 * ```
 * @example
* eg:
 * 桌面或者ios访问
 * ```ts
 * isAndroid() // => false
 * ```
 */
isAndroid(): boolean;

/**
 * 是否是桌面端
 * @return true | false
 * @category 设备Device
 * @example
* eg:
 * 桌面端访问
 * ```ts
 * isDesktop() // => true
 * ```
 * @example
* eg:
 * 移动端访问
 * ```ts
 * isDesktop() // => false
 * ```
 */
isDesktop(): boolean;

/**
 * 是否是ios系统
 * @return true | false
 * @category 设备Device
 * @example
* eg:
 * ios访问
 * ```ts
 * isIOS() // => true
 * ```
 * @example
* eg:
 * 桌面或者安卓访问
 * ```ts
 * isIOS() // => false
 * ```
 */
isIOS(): boolean;

/**
 * 是否是移动端
 * @return true | false
 * @category 设备Device
 * @example
* eg:
 * 移动端访问
 * ```ts
 * isMobile() // => true
 * ```
 * @example
* eg:
 * 桌面端访问
 * ```ts
 * isMobile() // => false
 * ```
 */
isMobile(): boolean;

/**
 * 是否是QQ环境
 * @return true | false
 * @category 设备Device
 * @example
* eg:
 * QQ中端访问
 * ```ts
 * isQQ() // => true
 * ```
 * @example
* eg:
 * 非QQ访问
 * ```ts
 * isQQ() // => false
 * ```
 */
isQQ(): boolean;

/**
 * 是否是微信环境
 * @return true | false
 * @category 设备Device
 * @example
* eg:
 * 微信中端访问
 * ```ts
 * isWeixin() // => true
 * ```
 * @example
* eg:
 * 非微信访问
 * ```ts
 * isWeixin() // => false
 * ```
 */
isWeixin(): boolean;

/**
 * 是否是微信小程序环境
 * @return true | false
 * @category 设备Device
 * @example
* eg:
 * 微信小程序中端访问
 * ```ts
 * isWeixinMini() // => true
 * ```
 * @example
* eg:
 * 非微信小程序访问
 * ```ts
 * isWeixinMini() // => false
 * ```
 */
isWeixinMini(): boolean;

/**
 * 是否是windows环境
 * @return true | false
 * @category 设备Device
 * @example
* eg:
 * windows环境中端访问
 * ```ts
 * isWin() // => true
 * ```
 * @example
* eg:
 * 非windows环境访问
 * ```ts
 * isWin() // => false
 * ```
 */
isWin(): boolean;

/**
 * 退出全屏
 * @throws 浏览器不支持全屏操作
 * @category 浏览器Dom
 * @example
* eg:
 * ```ts
 * exitFullscreen()
 * ```
 */
exitFullscreen(): void;

/**
 * 指定dom节点全屏
 * @param el 指定的dom节点，不指定默认指向document.body
 * @throws 浏览器不支持全屏操作
 * @category 浏览器Dom
 * @example
* eg:
 * ```ts
 * launchFullscreen()
 * ```
 * @example
* eg:
 * ```ts
 * upperFirst(document.querySelector('a'))
 * ```
 */
launchFullscreen(el?: HTMLElement): void;

/**
 * 防抖
 * @param func 函数
 * @param awit 延迟时间 默认 500毫秒
 * @param option 可选的对象
 * @param option.leading 前置边缘执行，默认 false
 * @param option.trailing 后置边缘执行，默认 true
 * @throws awit不是number awit存在但不是数字时触发
 * @throws leading不是boolean leading存在但不是boolean时触发
 * @throws trailing不是boolean trailing存在但不是boolean时触发
 * @category 函数Function
 * @example
* eg:
 * ```ts
 * debounce(function () { ... })
 * ```
 * @example
* eg:
 * 自定义时间
 * ```ts
 * debounce(function () { ... }, 300)
 * ```
 * @example
* eg:
 * 前置边缘执行,函数触发时立即执行一次
 * ```ts
 * debounce(function () { ... }, 500, {leading: true})
 * ```
 * @example
* eg:
 * 后置边缘执行,函数延迟时间达到后执行
 * ```ts
 * debounce(function () { ... }, 500, {trailing: true})
 * ```
 * @example
* eg:
 * 在vue2中使用
 * ```ts
 * getlist: debounce(function () { ... })
 * ```
 */
debounce(func: (...params: any[]) => any, awit?: number, option?: {
    leading?: boolean;
    trailing?: boolean;
}): any;

/**
 * 只调用一次的函数
 * @param func 函数
 * @category 函数Function
 * @example
* eg:
 * ```ts
 * once(function () { ... })
 * ```
 * @example
* eg:
 * 在vue2中使用
 * ```ts
 * getlist: once(function () { ... })
 * ```
 */
once(func: (...params: any[]) => any): (this: unknown, ...args: any[]) => void;

/**
 * 节流
 * @param func 函数
 * @param wait 延迟时间 默认 500毫秒
 * @param immediate 是否立即执行
 * @throws wait不是number wait存在但不是数字时触发
 * @throws immediate不是boolean immediate存在但不是boolean时触发
 * @category 函数Function
 * @example
* eg:
 * ```ts
 * throttle(function () { ... })
 * ```
 * @example
* eg:
 * 自定义时间
 * ```ts
 * throttle(function () { ... }, 300)
 * ```
 * @example
* eg:
 * 函数触发时立即执行一次
 * ```ts
 * throttle(function () { ... }, 500, immediate: true)
 * ```
 * @example
* eg:
 * 在vue2中使用
 * ```ts
 * getlist: throttle(function () { ... })
 * ```
 */
throttle(func: (...params: any[]) => any, wait?: number, immediate?: boolean): (this: unknown, ...args: any[]) => void;

/**
 * 数字补0
 * @param value 数字或者字符串的数字
 * @param len 补充的长度， 默认2
 * @return 返回字符串
 * @category 数字Number
 * @example
* eg:
 * ```ts
 * padInt(1) => '01'
 * ```
 * @example
* eg:
 * ```ts
 * padInt(12) => '12'
 * ```
 * @example
* eg:
 * ```ts
 * padInt(12, 3) => '012'
 * ```
 */
padInt(value: string | number, len?: number): string;

/**
 * 数字保留小数位
 * @param value 数字
 * @param num 保留的小数位
 * @param isRound 是否需要四舍五入
 * @return 返回数字
 * @throws 无法转换为数字
 * @throws isRound不是boolean
 * @category 数字Number
 * @example
* eg:
 * ```ts
 * toFixed(1) // 1
 * ```
 * @example
* eg:
 * ```ts
 * toFixed(1.21) // 1.21
 * ```
 * @example
* eg:
 * 默认会四舍五入
 * ```ts
 * toFixed(1.238, 2) // 1.24
 * ```
 * @example
* eg:
 * 不进行四舍五入
 * ```ts
 * toFixed(1.238, 2, false) // 1.23
 * ```
 */
toFixed(value: number, num?: number, isRound?: boolean): number;

/**
 * 转换为数字
 * @param value 任意值
 * @return 返回数字
 * @throws 无法转换为数字
 * @category 数字Number
 * @example
* eg:
 * ```ts
 * toNumber('1') // 1
 * ```
 * @example
* eg:
 * ```ts
 * toNumber('1.2') // 1.2
 * ```
 * @example
* eg:
 * ```ts
 * toNumber('a123') // error => a123无法转换为数字
 * ```
 */
toNumber<T>(value: T): number;

/**
 * 数组对象key值求和
 * @param target 目标对象
 * @param keys 需要求和的key数组
 * @return 求和后的对象
 * @category 对象Object
 * @example
* eg:
 * ```ts
 * arrObjSum([{id: 1, age: 10, sx: 1}, {id: 2, age: 20, sx: 2}], ['id', 'age'])
 * // => {id: 3, age: 30}
 * ```
 * @example
* eg:
 * 求和项不是数字时会以0处理
 * ```ts
 * arrObjSum([{id: 'a', age: 10, sx: 1}, {id: 2, age: 'b', sx: 2}], ['id', 'age'])
 * // => {id: 2, age: 10}
 * ```
 */
arrObjSum<T extends Record<string, any>, K extends keyof T>(target: T[], keys: K[]): Record<string, any>;

type MergeTuple<T extends any[]> = T extends [infer F, ...infer R] ? Omit<F, keyof MergeTuple<R>> & MergeTuple<R> : {};
type Merge<T, U> = Omit<T, keyof U> & U;
/**
 * 合并对象
 * @param target 目标对象，被合并的对象
 * @param sources 源对象，可以多个
 * @return 目标对象
 * @throws target参数必须是object  target参数不是对象时触发
 * @category 对象Object
 * @example
* eg:
 * 对象合并效果与Object.assign一致
 * ```ts
 * assign({a: 1, c: 3}, {c: 5}) // => {a: 1, c: 5}
 * ```
 */
assign<T extends Record<string, any>, U extends Record<string, any>[]>(target: T, ...sources: U): keyof T extends never ? {} : Merge<T, MergeTuple<U>>;
export {};

type MergeTuple<T extends any[]> = T extends [infer F, ...infer R] ? Omit<F, keyof MergeTuple<R>> & MergeTuple<R> : {};
type Merge<T, U> = Omit<T, keyof U> & U;
/**
 * 最小合并对象
 * @param target 目标对象，被合并的对象
 * @param sources 源对象，可以多个
 * @return 目标对象
 * @throws target参数必须是object  target参数不是对象时触发
 * @category 对象Object
 * @example
* eg:
 * 最小合并对象，只会合并源对象原有的属性，其他忽略
 * ```ts
 * assignMin({a: 1, c: 1}, {a: 2, b: 3}, {c: 3}) // => {a: 2, c: 3}
 * ```
 */
assignMin<T extends Record<string, any>, U extends Record<string, any>[]>(target: T, ...sources: U): keyof T extends never ? {} : Omit<Merge<T, MergeTuple<U>>, Exclude<keyof MergeTuple<U>, keyof T> | Exclude<Exclude<keyof T, keyof MergeTuple<U>>, keyof T>>;
export {};

/**
 * 指定深度或者广度的对象
 * @param deep 深度
 * @param breadth 广度
 * @return 对象
 * @category 对象Object
 * @example
* eg:
 * ```ts
 * createData(1) // => {data: {}}
 * ```
 * @example
* eg:
 * ```ts
 * createData(2, 2)
 * // =>
 * {
 *   data: {
 *      0: 0,
 *      1: 1,
 *      data: {
 *          0: 0,
 *          1: 1
 *      }
 *   }
 * }
 * ```
 */
createData(deep?: number, breadth?: number): {
    [key: number]: any;
    data?: any;
};

/**
 * 检查指定对象是否存在指定属性
 * @param target 指定对象
 * @param key 要检查的属性
 * @return true | false
 * @category 对象Object
 * @example
* eg:
 * ```ts
 * hasOwn({a: 1, b: 0}, 'b') // => true
 * hasOwn({a: 1, b: 0}, 'c') // => false
 * ```
 */
hasOwn(target: Record<string, any>, key: string): boolean;

/**
 * 删除指定对象的指定属性
 * @param target 指定对象
 * @param keys 由需要删除的属性组成的数组，不传时为[]
 * @return 新的对象
 * @category 对象Object
 * @example
* eg:
 * ```ts
 * omit({a: 1, b: 2, c: 3}, ['a', 'c']) // => {b: 2}
 * ```
 */
omit<T extends Record<string, any>>(target: T): T;
omit<T extends Record<string, any>, U extends (keyof T)[]>(target: T, keys: U): Omit<T, U[number]>;

/**
 * 提取指定对象的指定属性
 * @param target 指定对象
 * @param keys 由需要提取的属性组成的数组，不传时为[]
 * @return 新的对象
 * @category 对象Object
 * @example
* eg:
 * ```ts
 * omit({a: 1, b: 2, c: 3}) // => {}
 * omit({a: 1, b: 2, c: 3}, []) // => {}
 * ```
 * @example
* eg:
 * ```
 * omit({a: 1, b: 2, c: 3}, ['a', 'c']) // => {a: 1, c: 3}
 * ```
 */
pick<T extends Record<string, any>>(target: T, keys?: []): {};
pick<T extends Record<string, any>, K extends keyof T>(target: T, keys: K[]): Pick<T, K>;

/**
 * 重置指定对象的值
 * 对对象中值为字符串的重置为: ''
 * 对对象中值为布尔值的重置为: false
 * 对对象中值为数字的重置为: 0
 * 对对象中值为数组的重置为: []
 * 对对象中值为对象的就递归，直到结束
 * @param target 指定对象
 * @return 新的对象
 * @category 对象Object
 * @example
* eg:
 * ```ts
 * omit({a: 1, b: '2', c: true, d: [1, 2, 3], e: {a: 1, b: '2', c: [6, 7]}})
 * // => {a: 0, b: '', c: false, d: [], e: {a: 0, b: '', c: []}}
 * ```
 */
resetObjectValues<T extends Record<string, any>>(target: T, n?: number): T;

/**
 * 获取字符串的字节长度
 * @param str 传入参数, 如果参数不是字符串，会先调用toString方法
 * @return 字符串
 * @category 字符串String
 * @example
* eg:
 * ```ts
 * byteSize('fred') // 4
 * ```
 * @example
* eg:
 * ```ts
 * byteSize('你好!') // 7
 * ```
 * @example
* eg:
 * 生僻汉字
 * ```ts
 * byteSize('𠮷') // 4
 * ```
 * @example
* eg:
 * 参数不是字符串，会先调用toString方法
 * ```ts
 * byteSize(true) // '4'
 * ```
 */
byteSize(str: any): number;

/**
 * 字符串替换
 * 使用指定的掩码字符替换start~length之间的所有字符
 * @param str 传入参数, 如果参数不是字符串，会先调用toString方法
 * @param start 开始下标
 * @param length 长度
 * @param mask 掩码字符 默认*
 * @return 字符串
 * @throws start 必须是数字  start不是数字时触发
 * @throws length 必须是数字 length存在且不是数字时触发
 * @throws mask 必须是字符串 mask不是字符串时触发
 * @category 字符串String
 * @example
* eg:
 * ```ts
 * mask('123456') // => '******'
 * ```
 * @example
* eg:
 * 设置开始位置
 * ```ts
 * mask('123456', 2) // => '12****'
 * ```
 * @example
* eg:
 * 设置长度
 * ```ts
 * mask('123456', 2, 3) // => '12***6'
 * ```
 * @example
* eg:
 * 修改掩码字符
 * ```ts
 * mask('123456', 2, 3, '.') // => '12...6'
 * ```
 */
mask(str: string, start?: number, length?: number, mask?: string): string;

/**
 * 移除字符串中的html标签
 * @param str 传入参数, 如果参数不是字符串，会先调用toString方法
 * @return 字符串
 * @category 字符串String
 * @example
* eg:
 * ```ts
 * removeHTML('<p>这是<em>一个</em>段落。</p>') // => 这是一个段落。
 * ```
 * @example
* eg:
 * 转义符也会被去除
 * ```ts
 * removeHTML('<p>这是<em>一个</em>段落。&nbsp;</p>') // => 这是一个段落。
 * ```
 * @example
* eg:
 * 参数不是字符串，会先调用toString方法
 * ```ts
 * removeHTML(true) // 'true'
 * ```
 */
removeHTML(str: any): string;

/**
 * 首字母大写
 * @param str 传入参数, 如果参数不是字符串，会先调用toString方法
 * @return 字符串
 * @category 字符串String
 * @example
* eg:
 * ```ts
 * upperFirst('fred') // 'Fred'
 * ```
 * @example
* eg:
 * 自定义时间
 * ```ts
 * upperFirst('FRED') // 'FRED'
 * ```
 * @example
* eg:
 * 参数不是字符串，会先调用toString方法
 * ```ts
 * upperFirst(true) // 'True'
 * ```
 */
upperFirst(str: any): string;

/**
 * 获取url上的参数
 * @param name 参数名，必填
 * @param url url地址，为空时是window.location.href， 非必填
 * @throws url 参数错误，不是有效的
 * @return 符合的值或者null
 * @category URL
 * @example
* eg:
 * 支持search和hash中取值，如果search和hash中有相同的参数，则默认使用search。
 * 不传值时，默认从window.location.href中取值
 * ```ts
 * getUrlParam('id') => 'a' // window.location.href: https://a.b.com/?id=a
 * ```
 * @example
* eg:
 * 从第二个参数的url上取值
 * ```ts
 * getUrlParam('id', 'https://a.b.com/?id=b') => 'b'
 * ```
 * @example
* eg:
 * 在第二个参数的url上优先从search中提取值。
 * ```ts
 * getUrlParam('id', 'http://a.b.com/?id=a#/index/?id=b') => 'a'
 * ```
 */
getUrlParam(name: string, url?: string): string | null;

/**
 * 获取url上的参数
 * @param option 可选的对象
 * @param option.url url地址，默认window.location.href， 非必填
 * @param option.type 类型，默认all， 非必填, 可选值：all, query, hash
 * @throws 参数错误， 应该传入一个对象 option不是对象时触发
 * @throws url参数错误，不是有效的  url不是有效链接时触发
 * @throws type 参数错误， 应该传入一个字符串 'search' | 'hash' | 'all'
 * @return 由参数组成的对象
 * @category URL
 * @example
* eg:
 * 支持search和hash中取值，如果search和hash中有相同的参数，则默认使用search。
 * 不传值时，默认从window.location.href中取值
 * ```ts
 * getUrlQuery() => {a：'1',b:'2'}
 * // => window.location.href: https://a.b.com/?a=1&b=2
 * ```
 * @example
* eg:
 * 从参数的url上取值
 * ```ts
 * getUrlQuery({url: 'http://a.b.com/?a=1&b=2#/index/?c=3&b=4'}) // => {a: '1', b: '2', c: '3'}
 * ```
 * @example
* eg:
 * 从参数的url上取值,只在search中取值
 * ```ts
 * getUrlQuery({url: 'http://a.b.com/?a=1&b=2#/index/?c=3&b=4', type: 'search'}) // => {id: '1', b: '2'}
 * ```
 * @example
* eg:
 * 从参数的url上取值,只在hash中取值
 * ```ts
 * getUrlQuery({url: 'http://a.b.com/?a=1&b=2#/index/?c=3&b=4', type: 'hash'}) // => {c: '3', b: '4'}
 * ```
 */
getUrlQuery(option?: {
    url?: string;
    type?: 'search' | 'hash' | 'all';
}): Record<string, any>;

/**
 * 是否是url
 * @param url 需要验证的内容，类型：string
 * @return Boolean
 * @throws 参数必须是string 参数不是string时触发
 * @category URL
 * @example
* eg:
 * ```ts
 * isURL('https://a.b.c')
 * // => true
 * ```
 * @example
* eg:
 * ```ts
 * isURL('123')
 * // => false
 * ```
 */
isURL(url: string): boolean;

/**
 * 参数序列化-字符转对象
 * @return 由参数组成的对象
 * @category URL
 * @example
* eg:
 * ```ts
 * qsParse('a=1&b=2')
 * // => 'a=1&b=2'
 * ```
 * @example
* eg:
 * ```ts
 * qsParse('a=1&b=2&c={'a':1}')
 * // => { a:1, b:2, c: { a :1 } }
 * ```
 * @example
* eg:
 * ```ts
 * qsParse('a=1&b=2&c={'a':1}', false)
 * // => { a:1, b:2, c: '{ a: 1 }' }
 * ```
 */
qsParse(query?: string, decode?: boolean): {
    [k: string]: any;
};

/**
 * 参数序列化-对象转字符
 * @return 由参数组成的对象
 * @category URL
 * @example
* eg:
 * ```ts
 * qsStringify({a: 1, b: 2})
 * // => 'a=1&b=2'
 * ```
 * @example
* eg:
 * 如果传入内容是undefined或者null，这个参数会被丢弃
 * 如果你想空参数，可以使用 `''`
 * ```ts
 * qsStringify({a: 1, b: undefined, c: null})
 * // => 'a=1'
 * ```
 * @example
* eg:
 * ```ts
 * qsStringify({a: 1, b: 2, c: {a: 1}})
 * // => 'a=1&b=2&c=%7B%22a%22%3A1%7D'
 * ```
 * @example
* eg:
 * 解码后输出
 * ```ts
 * qsStringify({a: 1, b: 2, c: {a: 1}}, true)
 * // => `a=1&b=2&c={'a':1}`
 * ```
 */
qsStringify(query?: Record<string, any>, decode?: boolean): string;

/**
 * 修改url上的参数
 * @param option.search 对象 用于修改search部分的数据， 非必填
 * @param option.hash 对象 用于修改hash部分的数据， 非必填
 * @param url url地址，默认window.location.href， 非必填
 * @throws 参数错误， 应该传入一个对象 option不是对象时触发
 * @throws search 参数错误， 应该传入一个对象 option不是对象时触发
 * @throws hash 参数错误， 应该传入一个对象 option不是对象时触发
 * @throws url 参数错误，不是有效的
 * @return 修改后的url地址
 * @category URL
 * @example
* eg:
 * 修改search中的值
 * ```ts
 * reviseUrlQuery({search: {a: '2', b: '3'}}, 'http://a.b.com/?a=1&b=2#/index/?c=3&b=4')
 * // => 'http://a.b.com/?a=2&b=3#/index/?c=3&b=4'
 * ```
 * @example
* eg:
 * 修改hash中的值
 * ```ts
 * reviseUrlQuery({hash: {c: '2', b: '3'}}, 'http://a.b.com/?a=1&b=2#/index/?c=3&b=4')
 * // => 'http://a.b.com/?a=1&b=2#/index/?c=2&b=3'
 * ```
 * @example
* eg:
 * 修改search、hash中的值
 * ```ts
 * reviseUrlQuery({search: {a: '5', b: '6'}, hash: {c: '7', b: '8'}}, 'http://a.b.com/?a=1&b=2#/index/?c=3&b=4')
 * // => 'http://a.b.com/?a=5&b=6#/index/?c=7&b=8'
 * ```
 */
reviseUrlQuery(option: {
    search?: Record<string, any>;
    hash?: Record<string, any>;
}, url?: string): string;

/**
 * 设置浏览器地址栏url
 * @param option 可选的对象
 * @param url url地址，默认window.location， 非必填
 * @param type 类型，默认pushState， 非必填, 可选值：pushState, replaceState
 * @throws url 参数错误，不是有效的
 * @throws type 参数错误， 应该传入一个字符串 'pushState' | 'replaceState'
 * @category URL
 * @example
* eg:
 * 修改了浏览器页面的地址栏的url显示，默认会添加新的历史记录
 * ```ts
 * setUrlQuery('https://a.b.com/?a=1&b=2')
 * ```
 * @example
* eg:
 * 修改了浏览器页面的地址栏的url显示，当前的页面的历史记录替换掉，不会添加新的历史记录
 * ```ts
 * setUrlQuery('https://a.b.com/?a=1&b=2', 'replaceState')
 * ```
 */
setUrlQuery(url: string, type?: 'pushState' | 'replaceState'): void;

/**
 * base64转blob
 * @param base64 base64
 * @param type 文件类型
 * @return Blob
 * @category 工具Util
 * @example
* eg:
 * ```ts
 * base64ToBlob()
 * ```
 */
base64ToBlob(base64: string, type?: string): Blob;

/**
 * 复制文本内容
 * 优先使用navigator.clipboard.writeText, 浏览器不支持使用时降级document.execCommand。
 * @param value 需要复制的字符串
 * @return Promise
 * @category 工具Util
 * @example
* eg:
 * ```ts
 * await copy('hello')
 * ```
 */
copy(value: string): Promise<void>;

/**
 * 深度复制
 * @param origin 对象或者数组
 * @return 深度复制后的对象或者数组
 * @category 工具Util
 * @example
* eg:
 * ```ts
 * deepClone([1,23, [1]]) // => [1,23, [1]]
 * ```
 * @example
* eg:
 * ```ts
 * deepClone({a: [1], b: () => {}}) // => {a: [1], b: () => {}}
 * ```
 */
deepClone<T extends Array<T> | any>(source: T): T;

/**
 * 文件下载
 * @param name 文件名
 * @param blob 文件blob数据
 * @category 工具Util
 * @example
* eg:
 * ```ts
 * const res = await fetch('https://a.b.com/').then(res => res.blob())
 * downloadFile('a.jpg', res)
 * ```
 */
downloadFile(name: string, blob: Blob): void;

/**
 * gbk 转 utf-8
 * @param value ArrayBuffer
 * @return 可以被JSON.parse转化时返回js对象，否则返回字符串
 * @category 工具Util
 * @example
* eg:
 * ```ts
 * const res = await fetch('https://a.b.com/').then(res => res.arrayBuffer())
 * gbkToUtf8(res)
 * ```
 */
gbkToUtf8(value: ArrayBuffer): object | string;

/**
 * 获取uuid
 * @return uuid
 * @category 工具Util
 * @example
* eg:
 * 符合 RFC4122 版本 4 的 UUID。
 * ```ts
 * getUUID() // '7ac8d9bc-0a0d-4f31-8134-896a485feed1'
 * ```
 */
getUUID(): string;

/**
 * 对手机号进行加密处理
 * @param value 手机号：支持字符串或者数字
 * @return 字符串 返回经过加密后的字符串
 * @throws 异常 手机号格式不正确
 * @category 工具Util
 * @example
* eg:
 * ```ts
 * phoneEncrypt(13300001111) => '133****1111'
 * ```
 * @example
* eg:
 * ```ts
 * phoneEncrypt('13300001111') => '133****1111'
 * ```
 * @example
* eg:
 * ```ts
 * phoneEncrypt('1330000') => throw '手机号格式不正确'
 * ```
 */
phoneEncrypt(value: string | number): string;

/**
 * 均衡获取指定范围的随机整数
 * 返回一个startNum 和 endNum之间的随机整数。如果你没有参数，那么将返回随机返回0和1。
 * 如果你只传递一个参数，那么将返回0和这个参数之间的整数。
 * 如果两个参数相差值是1，随机返回传入的两个值。
 * @param startNum 整数
 * @param endNum 整数
 * @return 随机整数
 * @category 工具Util
 * @example
* eg:
 * 随机返回0或者1
 * ```ts
 * random()
 * ```
 * @example
* eg:
 * 均衡获取0或者5的数
 * ```ts
 * random(5)
 * ```
 * @example
* eg:
 * 均衡获取1或者10的数
 * ```ts
 * random(1, 10)
 * ```
 */
random(startNum?: number, endNum?: number): number;

/**
 * 滚动至···
 * @param option 可选的对象
 * @param option.rate 滚动的步长，默认 4
 * @param option.num 滚动的目标值，默认 0
 * @param option.direction 滚动的方向，默认 'top', 支持 'top' | 'left'
 * @param option.dom 滚动的目标元素，默认 document.scrollingElement
 * @param callback 滚动结束的回调函数
 * @category 工具Util
 * @example
* eg:
 * 回到顶部
 * ```ts
 * scrollTo()
 * ```
 * @example
* eg:
 * 回到顶部后触发回调
 * ```ts
 * scrollTo({}, () => console.log('到了'))
 * ```
 * @example
* eg:
 * 回到距离顶部的100像素的位置
 * ```ts
 * scrollTo({num: 100})
 * ```
 * @example
* eg:
 * 滚动到元素box的最左端
 * ```ts
 * scrollTo({dom: document.querySelector('.box')})
 * ```
 * @example
* eg:
 * 滚动到元素box距离左端100像素位置
 * ```ts
 * scrollTo({num: 100, dom: document.querySelector('.box')})
 * ```
 */
scrollTo(option?: {
    rate?: number;
    num?: number;
    direction?: 'top' | 'left';
    dom?: HTMLElement;
}, callback?: () => void): void;

/**
 * 判断是否为数组
 * @param value 任意值
 * @return true | false
 * @category 数组Array
 * @example
* eg:
 * 验证通过
 * ```ts
 * isArray([]) => true
 * ```
 * @example
* eg:
 * 验证失败
 * ```ts
 * isArray({}) => false
 * ```
 */
isArray(value: any): boolean;

/**
 * 是否是数组对象
 * @return true | false
 * @category 数组Array
 * @example
* eg:
 * ```ts
 * isArrObj([{}]) // => true
 * ```
 * @example
* eg:
 * ```ts
 * isArrObj([]) // => false
 * ```
 */
isArrObj(object: any): any;

/**
 * 是否是基本类型
 * @return true | false
 * @category 工具Util
 * @example
* eg:
 * ```ts
 * isBasicType('12') // => true
 * ```
 * @example
* eg:
 * ```ts
 * isBasicType([]) // => false
 * ```
 */
isBasicType(value: any): boolean;

/**
 * 判断是否为Boolean
 * @param value 任意值
 * @return true | false
 * @category 工具Util
 * @example
* eg:
 * 验证通过
 * ```ts
 * isBoolean(true) => true
 * isBoolean(false) => true
 * ```
 * @example
* eg:
 * 验证失败
 * ```ts
 * isBoolean(123) => false
 * ```
 */
isBoolean(value: any): boolean;

/**
 * 判断是否为Date
 * @param value 任意值
 * @return true | false
 * @category 时间Date
 * @example
* eg:
 * 验证通过
 * ```ts
 * isDate(new Date()) => true
 * ```
 * @example
* eg:
 * 验证失败
 * ```ts
 * isDate(123) => false
 * ```
 */
isDate(value: any): boolean;

/**
 * 是否是dom
 * @param value dom
 * @return true | false
 * @category 浏览器Dom
 * @example
* eg:
 * ```ts
 * isDom() // => false
 * ```
 * @example
* eg:
 * ```ts
 * isDom(document.querySelector('head')) // => true
 * ```
 */
isDom(value: any): boolean;

/**
 * 判断对象是否是空对象
 * @param object 对象
 * @return true | false
 * @throws 传入参数不是Object 传入参数不是Object时触发
 * @category 对象Object
 * @example
* eg:
 * 验证通过
 * ```ts
 * isEmptyObject({}) => true
 * ```
 * @example
* eg:
 * 验证失败
 * ```ts
 * isEmptyObject({a: 1}) => false
 * ```
 */
isEmptyObject(object: Record<string, unknown>): boolean;

/**
 * 判断任意两个值是否相等
 * @param value1 任意值
 * @param value2 任意值
 * @return true | false
 * @category 工具Util
 * @example
* eg:
 * 没有参数时，直接返回true
 * ```ts
 * isEqual() => true
 * ```
 * @example
* eg:
 * 只要一个参数时，第二个参数默等于第一个参数
 * ```ts
 * isEqual(1) => true
 * ```
 * ```ts
 * isEqual(false) => true
 * ```
 * ```ts
 * isEqual([]) => true
 * ```
 * @example
* eg:
 * 基本数据类型
 * ```ts
 * isEqual(1, 1) => true
 * ```
 * ```ts
 * isEqual(1, 2) => false
 * ```
 * ```ts
 * isEqual(true, 'a') => false
 * ```
 * @example
* eg:
 * 引用数据类型
 * ```ts
 * isEqual([], []) => true
 * ```
 * ```ts
 * isEqual({}, {}) => true
 * ```
 * ```ts
 * isEqual([], {}) => false
 * ```
 * ```ts
 * isEqual([1, 2], [1, 2]) => true
 * ```
 * ```ts
 * isEqual({a: 1}, {a: 1}) => true
 * ```
 */
isEqual(value1?: any, value2?: any): boolean;

/**
 * 判断是否为Function
 * @param value 任意值
 * @return true | false
 * @category 函数Function
 * @example
* eg:
 * 验证通过
 * ```ts
 * isFunction(function(){}) => true
 * ```
 * @example
* eg:
 * 验证失败
 * ```ts
 * isFunction(123) => false
 * ```
 */
isFunction(value: any): boolean;

/**
 * 检查字符串是否包含中文
 * @param value 字符串
 * @return true | false
 * @category 工具Util
 * @example
* eg:
 * ```ts
 * isIncludeChinese() // => false
 * ```
 * @example
* eg:
 * ```ts
 * isIncludeChinese('你好') // => true
 * ```
 */
isIncludeChinese(value?: string): boolean;

/**
 * 是否为整数
 * @param value 检查的值
 * @return true | false
 * @category 数字Number
 * @example
* eg:
 * ```ts
 * isInt(1) // => true
 * ```
 * @example
* eg:
 * ```ts
 * isInt(1.21) // => false
 * ```
 */
isInt(value: any): boolean;

/**
 * 是否是json字符串
 * @return true | false
 * @category 工具Util
 * @example
* eg:
 * ```ts
 * isJsonString('{"a":1}') // => true
 * ```
 * @example
* eg:
 * ```ts
 * isJsonString(1) // => false
 * ```
 */
isJsonString(str: string): boolean;

/**
 * 判断是否为Location
 * @param value 任意值
 * @return true | false
 * @category URL
 * @example
* eg:
 * 验证通过
 * ```ts
 * isLocation(window.location) => true
 * ```
 * @example
* eg:
 * 验证失败
 * ```ts
 * isLocation(123) => false
 * ```
 */
isLocation(value: any): boolean;

/**
 * 判断是否为Map
 * @param value 任意值
 * @return true | false
 * @category 对象Object
 * @example
* eg:
 * 验证通过
 * ```ts
 * isMap(new Map()) => true
 * ```
 * @example
* eg:
 * 验证失败
 * ```ts
 * isMap(123) => false
 * ```
 */
isMap(value: any): boolean;

/**
 * 是否是null|undefined
 * @param value 任意值
 * @return true | false
 * @category 工具Util
 * @example
* eg:
 * ```ts
 * isNullOrUndefined(null) // => true
 * isNullOrUndefined(undefined) // => true
 * ```
 * @example
* eg:
 * ```ts
 * isNullOrUndefined(2) // => false
 * ```
 */
isNullOrUndefined(value: any): boolean;

/**
 * 判断是否为数字
 * @param value 任意值
 * @return true | false
 * @category 数字Number
 * @example
* eg:
 * 验证通过
 * ```ts
 * isNumber(123) => true
 * ```
 * @example
* eg:
 * 验证失败
 * ```ts
 * isNumber('123') => false
 * ```
 */
isNumber(value: any): boolean;

/**
 * 判断是否为对象
 * @param value 任意值
 * @return true | false
 * @category 对象Object
 * @example
* eg:
 * 验证通过
 * ```ts
 * isObject({}) => true
 * ```
 * @example
* eg:
 * 验证失败
 * ```ts
 * isObject([]) => false
 * ```
 */
isObject(value: any): boolean;

/**
 * 判断是否为手机号
 * @param value 任意值
 * @return true | false
 * @category 工具Util
 * @example
* eg:
 * 验证通过
 * ```ts
 * isPhone(13302101452) => true
 * ```
 * @example
* eg:
 * 验证失败
 * ```ts
 * isPhone(1330210152) => false
 * ```
 */
isPhone(value: string | number): boolean;

/**
 * 判断是否为Promise
 * @param value 任意值
 * @return true | false
 * @category 工具Util
 * @example
* eg:
 * 验证通过
 * ```ts
 * isPromise(new Promise(() => {})) => true
 * isPromise(Promise.all([])) => true
 * ```
 * @example
* eg:
 * 验证失败
 * ```ts
 * isPromise(Promise) => false
 * ```
 * @example
* eg:
 * ```ts
 * isPromise(Promise) => false
 * ```
 */
isPromise(value: any): boolean;

/**
 * 判断是否为Set
 * @param value 任意值
 * @return true | false
 * @category 对象Object
 * @example
* eg:
 * 验证通过
 * ```ts
 * isSet(new Set()) => true
 * ```
 * @example
* eg:
 * 验证失败
 * ```ts
 * isSet(123) => false
 * ```
 */
isSet(value: any): boolean;

/**
 * 判断是否为字符串
 * @param value 任意值
 * @return true | false
 * @category 字符串String
 * @example
* eg:
 * 验证通过
 * ```ts
 * isString('abc') => true
 * ```
 * @example
* eg:
 * 验证失败
 * ```ts
 * isString(123) => false
 * ```
 */
isString(value: any): boolean;

/**
 * 判断是否为Symbol
 * @param value 任意值
 * @return true | false
 * @category 对象Object
 * @example
* eg:
 * 验证通过
 * ```ts
 * isSymbol(Symbol(1)) => true
 * ```
 * @example
* eg:
 * 验证失败
 * ```ts
 * isSymbol(Symbol) => false
 * ```
 */
isSymbol(value: any): boolean;


}